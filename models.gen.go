// Package billingo provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package billingo

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

// Defines values for Category.
const (
	CategoryAdvertisement  Category = "advertisement"
	CategoryDevelopment    Category = "development"
	CategoryOther          Category = "other"
	CategoryOverheads      Category = "overheads"
	CategoryService        Category = "service"
	CategoryStock          Category = "stock"
	CategoryTangibleAssets Category = "tangible_assets"
)

// Defines values for CheckTaxNumberMessage.
const (
	CheckTaxNumberMessageExternalNavServiceUnreachable CheckTaxNumberMessage = "external_nav_service_unreachable"
	CheckTaxNumberMessageInvalidTaxNumber              CheckTaxNumberMessage = "invalid_tax_number"
	CheckTaxNumberMessageNoOnlineSzamlaSettings        CheckTaxNumberMessage = "no_online_szamla_settings"
	CheckTaxNumberMessageNonExistTaxNumber             CheckTaxNumberMessage = "non_exist_tax_number"
	CheckTaxNumberMessageValidationOk                  CheckTaxNumberMessage = "validation_ok"
)

// Defines values for CorrectionType.
const (
	CorrectionTypeAdvance             CorrectionType = "advance"
	CorrectionTypeCanceled            CorrectionType = "canceled"
	CorrectionTypeCancellation        CorrectionType = "cancellation"
	CorrectionTypeCertOfCompletion    CorrectionType = "cert_of_completion"
	CorrectionTypeDCertOfCompletion   CorrectionType = "d_cert_of_completion"
	CorrectionTypeDossier             CorrectionType = "dossier"
	CorrectionTypeDraft               CorrectionType = "draft"
	CorrectionTypeDraftOffer          CorrectionType = "draft_offer"
	CorrectionTypeDraftOrderForm      CorrectionType = "draft_order_form"
	CorrectionTypeDraftWaybill        CorrectionType = "draft_waybill"
	CorrectionTypeInvoice             CorrectionType = "invoice"
	CorrectionTypeModification        CorrectionType = "modification"
	CorrectionTypeModified            CorrectionType = "modified"
	CorrectionTypeOffer               CorrectionType = "offer"
	CorrectionTypeOrderForm           CorrectionType = "order_form"
	CorrectionTypeProforma            CorrectionType = "proforma"
	CorrectionTypeReceipt             CorrectionType = "receipt"
	CorrectionTypeReceiptCancellation CorrectionType = "receipt_cancellation"
	CorrectionTypeWaybill             CorrectionType = "waybill"
)

// Defines values for Country.
const (
	CountryAC    Country = "AC"
	CountryAD    Country = "AD"
	CountryAE    Country = "AE"
	CountryAF    Country = "AF"
	CountryAG    Country = "AG"
	CountryAI    Country = "AI"
	CountryAL    Country = "AL"
	CountryAM    Country = "AM"
	CountryAO    Country = "AO"
	CountryAQ    Country = "AQ"
	CountryAR    Country = "AR"
	CountryAS    Country = "AS"
	CountryAT    Country = "AT"
	CountryAU    Country = "AU"
	CountryAW    Country = "AW"
	CountryAX    Country = "AX"
	CountryAZ    Country = "AZ"
	CountryBA    Country = "BA"
	CountryBB    Country = "BB"
	CountryBD    Country = "BD"
	CountryBE    Country = "BE"
	CountryBF    Country = "BF"
	CountryBG    Country = "BG"
	CountryBH    Country = "BH"
	CountryBI    Country = "BI"
	CountryBJ    Country = "BJ"
	CountryBL    Country = "BL"
	CountryBM    Country = "BM"
	CountryBN    Country = "BN"
	CountryBO    Country = "BO"
	CountryBQ    Country = "BQ"
	CountryBR    Country = "BR"
	CountryBS    Country = "BS"
	CountryBT    Country = "BT"
	CountryBW    Country = "BW"
	CountryBY    Country = "BY"
	CountryBZ    Country = "BZ"
	CountryCA    Country = "CA"
	CountryCC    Country = "CC"
	CountryCD    Country = "CD"
	CountryCF    Country = "CF"
	CountryCG    Country = "CG"
	CountryCH    Country = "CH"
	CountryCI    Country = "CI"
	CountryCK    Country = "CK"
	CountryCL    Country = "CL"
	CountryCM    Country = "CM"
	CountryCN    Country = "CN"
	CountryCO    Country = "CO"
	CountryCR    Country = "CR"
	CountryCU    Country = "CU"
	CountryCV    Country = "CV"
	CountryCW    Country = "CW"
	CountryCX    Country = "CX"
	CountryCY    Country = "CY"
	CountryCZ    Country = "CZ"
	CountryDE    Country = "DE"
	CountryDG    Country = "DG"
	CountryDJ    Country = "DJ"
	CountryDK    Country = "DK"
	CountryDM    Country = "DM"
	CountryDO    Country = "DO"
	CountryDZ    Country = "DZ"
	CountryEA    Country = "EA"
	CountryEC    Country = "EC"
	CountryEE    Country = "EE"
	CountryEG    Country = "EG"
	CountryEH    Country = "EH"
	CountryER    Country = "ER"
	CountryES    Country = "ES"
	CountryET    Country = "ET"
	CountryEmpty Country = ""
	CountryFI    Country = "FI"
	CountryFJ    Country = "FJ"
	CountryFK    Country = "FK"
	CountryFM    Country = "FM"
	CountryFO    Country = "FO"
	CountryFR    Country = "FR"
	CountryGA    Country = "GA"
	CountryGB    Country = "GB"
	CountryGD    Country = "GD"
	CountryGE    Country = "GE"
	CountryGF    Country = "GF"
	CountryGG    Country = "GG"
	CountryGH    Country = "GH"
	CountryGI    Country = "GI"
	CountryGL    Country = "GL"
	CountryGM    Country = "GM"
	CountryGN    Country = "GN"
	CountryGP    Country = "GP"
	CountryGQ    Country = "GQ"
	CountryGR    Country = "GR"
	CountryGS    Country = "GS"
	CountryGT    Country = "GT"
	CountryGU    Country = "GU"
	CountryGW    Country = "GW"
	CountryGY    Country = "GY"
	CountryHK    Country = "HK"
	CountryHN    Country = "HN"
	CountryHR    Country = "HR"
	CountryHT    Country = "HT"
	CountryHU    Country = "HU"
	CountryIC    Country = "IC"
	CountryID    Country = "ID"
	CountryIE    Country = "IE"
	CountryIL    Country = "IL"
	CountryIM    Country = "IM"
	CountryIN    Country = "IN"
	CountryIO    Country = "IO"
	CountryIQ    Country = "IQ"
	CountryIR    Country = "IR"
	CountryIS    Country = "IS"
	CountryIT    Country = "IT"
	CountryJE    Country = "JE"
	CountryJM    Country = "JM"
	CountryJO    Country = "JO"
	CountryJP    Country = "JP"
	CountryKE    Country = "KE"
	CountryKG    Country = "KG"
	CountryKH    Country = "KH"
	CountryKI    Country = "KI"
	CountryKM    Country = "KM"
	CountryKN    Country = "KN"
	CountryKP    Country = "KP"
	CountryKR    Country = "KR"
	CountryKW    Country = "KW"
	CountryKY    Country = "KY"
	CountryKZ    Country = "KZ"
	CountryLA    Country = "LA"
	CountryLB    Country = "LB"
	CountryLC    Country = "LC"
	CountryLI    Country = "LI"
	CountryLK    Country = "LK"
	CountryLR    Country = "LR"
	CountryLS    Country = "LS"
	CountryLT    Country = "LT"
	CountryLU    Country = "LU"
	CountryLV    Country = "LV"
	CountryLY    Country = "LY"
	CountryMA    Country = "MA"
	CountryMC    Country = "MC"
	CountryMD    Country = "MD"
	CountryME    Country = "ME"
	CountryMF    Country = "MF"
	CountryMG    Country = "MG"
	CountryMH    Country = "MH"
	CountryMK    Country = "MK"
	CountryML    Country = "ML"
	CountryMM    Country = "MM"
	CountryMN    Country = "MN"
	CountryMO    Country = "MO"
	CountryMP    Country = "MP"
	CountryMQ    Country = "MQ"
	CountryMR    Country = "MR"
	CountryMS    Country = "MS"
	CountryMT    Country = "MT"
	CountryMU    Country = "MU"
	CountryMV    Country = "MV"
	CountryMW    Country = "MW"
	CountryMX    Country = "MX"
	CountryMY    Country = "MY"
	CountryMZ    Country = "MZ"
	CountryNA    Country = "NA"
	CountryNC    Country = "NC"
	CountryNE    Country = "NE"
	CountryNF    Country = "NF"
	CountryNG    Country = "NG"
	CountryNI    Country = "NI"
	CountryNL    Country = "NL"
	CountryNO    Country = "NO"
	CountryNP    Country = "NP"
	CountryNR    Country = "NR"
	CountryNU    Country = "NU"
	CountryNZ    Country = "NZ"
	CountryOM    Country = "OM"
	CountryPA    Country = "PA"
	CountryPE    Country = "PE"
	CountryPF    Country = "PF"
	CountryPG    Country = "PG"
	CountryPH    Country = "PH"
	CountryPK    Country = "PK"
	CountryPL    Country = "PL"
	CountryPM    Country = "PM"
	CountryPN    Country = "PN"
	CountryPR    Country = "PR"
	CountryPS    Country = "PS"
	CountryPT    Country = "PT"
	CountryPW    Country = "PW"
	CountryPY    Country = "PY"
	CountryQA    Country = "QA"
	CountryRE    Country = "RE"
	CountryRO    Country = "RO"
	CountryRS    Country = "RS"
	CountryRU    Country = "RU"
	CountryRW    Country = "RW"
	CountrySA    Country = "SA"
	CountrySB    Country = "SB"
	CountrySC    Country = "SC"
	CountrySD    Country = "SD"
	CountrySE    Country = "SE"
	CountrySG    Country = "SG"
	CountrySH    Country = "SH"
	CountrySI    Country = "SI"
	CountrySJ    Country = "SJ"
	CountrySK    Country = "SK"
	CountrySL    Country = "SL"
	CountrySM    Country = "SM"
	CountrySN    Country = "SN"
	CountrySO    Country = "SO"
	CountrySR    Country = "SR"
	CountrySS    Country = "SS"
	CountryST    Country = "ST"
	CountrySV    Country = "SV"
	CountrySX    Country = "SX"
	CountrySY    Country = "SY"
	CountrySZ    Country = "SZ"
	CountryTA    Country = "TA"
	CountryTC    Country = "TC"
	CountryTD    Country = "TD"
	CountryTF    Country = "TF"
	CountryTG    Country = "TG"
	CountryTH    Country = "TH"
	CountryTJ    Country = "TJ"
	CountryTK    Country = "TK"
	CountryTL    Country = "TL"
	CountryTM    Country = "TM"
	CountryTN    Country = "TN"
	CountryTO    Country = "TO"
	CountryTR    Country = "TR"
	CountryTT    Country = "TT"
	CountryTV    Country = "TV"
	CountryTW    Country = "TW"
	CountryTZ    Country = "TZ"
	CountryUA    Country = "UA"
	CountryUG    Country = "UG"
	CountryUM    Country = "UM"
	CountryUS    Country = "US"
	CountryUY    Country = "UY"
	CountryUZ    Country = "UZ"
	CountryVA    Country = "VA"
	CountryVC    Country = "VC"
	CountryVE    Country = "VE"
	CountryVG    Country = "VG"
	CountryVI    Country = "VI"
	CountryVN    Country = "VN"
	CountryVU    Country = "VU"
	CountryWF    Country = "WF"
	CountryWS    Country = "WS"
	CountryXA    Country = "XA"
	CountryXB    Country = "XB"
	CountryXK    Country = "XK"
	CountryYE    Country = "YE"
	CountryYT    Country = "YT"
	CountryZA    Country = "ZA"
	CountryZM    Country = "ZM"
	CountryZW    Country = "ZW"
)

// Defines values for Currency.
const (
	AED Currency = "AED"
	AUD Currency = "AUD"
	BGN Currency = "BGN"
	BRL Currency = "BRL"
	CAD Currency = "CAD"
	CHF Currency = "CHF"
	CNY Currency = "CNY"
	CZK Currency = "CZK"
	DKK Currency = "DKK"
	EUR Currency = "EUR"
	GBP Currency = "GBP"
	HKD Currency = "HKD"
	HRK Currency = "HRK"
	HUF Currency = "HUF"
	IDR Currency = "IDR"
	ILS Currency = "ILS"
	INR Currency = "INR"
	ISK Currency = "ISK"
	JPY Currency = "JPY"
	KRW Currency = "KRW"
	MXN Currency = "MXN"
	MYR Currency = "MYR"
	NOK Currency = "NOK"
	NZD Currency = "NZD"
	PHP Currency = "PHP"
	PLN Currency = "PLN"
	RON Currency = "RON"
	RSD Currency = "RSD"
	RUB Currency = "RUB"
	SEK Currency = "SEK"
	SGD Currency = "SGD"
	THB Currency = "THB"
	TRY Currency = "TRY"
	UAH Currency = "UAH"
	USD Currency = "USD"
	ZAR Currency = "ZAR"
)

// Defines values for DateType.
const (
	DateTypeDueDate         DateType = "due_date"
	DateTypeFulfillmentDate DateType = "fulfillment_date"
	DateTypeInvoiceDate     DateType = "invoice_date"
)

// Defines values for DiscountType.
const (
	Percent DiscountType = "percent"
)

// Defines values for DocumentBlockType.
const (
	DocumentBlockTypeCertificateOfCompletion DocumentBlockType = "certificate_of_completion"
	DocumentBlockTypeDossier                 DocumentBlockType = "dossier"
	DocumentBlockTypeInvoice                 DocumentBlockType = "invoice"
	DocumentBlockTypeOffer                   DocumentBlockType = "offer"
	DocumentBlockTypeOrderForm               DocumentBlockType = "order_form"
	DocumentBlockTypeReceipt                 DocumentBlockType = "receipt"
	DocumentBlockTypeWaybill                 DocumentBlockType = "waybill"
)

// Defines values for DocumentExportOtherOptions.
const (
	DocumentExportOtherOptionsAll         DocumentExportOtherOptions = "all"
	DocumentExportOtherOptionsExpired     DocumentExportOtherOptions = "expired"
	DocumentExportOtherOptionsOutstanding DocumentExportOtherOptions = "outstanding"
)

// Defines values for DocumentExportQueryType.
const (
	DocumentExportQueryTypeFulfillmentDate DocumentExportQueryType = "fulfillment_date"
	DocumentExportQueryTypeInvoiceDate     DocumentExportQueryType = "invoice_date"
)

// Defines values for DocumentExportSortBy.
const (
	FulfillmentDate  DocumentExportSortBy = "fulfillment_date"
	InvoiceDate      DocumentExportSortBy = "invoice_date"
	InvoiceRawNumber DocumentExportSortBy = "invoice_raw_number"
)

// Defines values for DocumentExportStatusState.
const (
	Fail       DocumentExportStatusState = "fail"
	Pending    DocumentExportStatusState = "pending"
	Processing DocumentExportStatusState = "processing"
	Success    DocumentExportStatusState = "success"
	Warning    DocumentExportStatusState = "warning"
)

// Defines values for DocumentExportType.
const (
	Armada              DocumentExportType = "armada"
	AwsBatch            DocumentExportType = "aws_batch"
	ExPanda             DocumentExportType = "ex_panda"
	Forintsoft          DocumentExportType = "forintsoft"
	Hessyn              DocumentExportType = "hessyn"
	Ima                 DocumentExportType = "ima"
	Infoteka            DocumentExportType = "infoteka"
	KulcsKonyv          DocumentExportType = "kulcs_konyv"
	Maxitax             DocumentExportType = "maxitax"
	NagyMachinator      DocumentExportType = "nagy_machinator"
	NavPtgszlah         DocumentExportType = "nav_ptgszlah"
	NavStatus           DocumentExportType = "nav_status"
	NavXml              DocumentExportType = "nav_xml"
	NavXmlAlias         DocumentExportType = "nav_xml_alias"
	Novitax             DocumentExportType = "novitax"
	ProformaOutstanding DocumentExportType = "proforma_outstanding"
	Relax               DocumentExportType = "relax"
	Rlb                 DocumentExportType = "rlb"
	Rlb60               DocumentExportType = "rlb60"
	RlbDoubleEntry      DocumentExportType = "rlb_double_entry"
	SimpleCsv           DocumentExportType = "simple_csv"
	SimpleExcel         DocumentExportType = "simple_excel"
	SimpleExcelItems    DocumentExportType = "simple_excel_items"
	Tensoft             DocumentExportType = "tensoft"
	Tensoft29Dot65      DocumentExportType = "tensoft_29_dot_65"
)

// Defines values for DocumentForm.
const (
	Electronic DocumentForm = "electronic"
	Paper      DocumentForm = "paper"
)

// Defines values for DocumentFormat.
const (
	DocumentFormatElectronic  DocumentFormat = "electronic"
	DocumentFormatEmpty       DocumentFormat = ""
	DocumentFormatTraditional DocumentFormat = "traditional"
)

// Defines values for DocumentInsertType.
const (
	DocumentInsertTypeAdvance  DocumentInsertType = "advance"
	DocumentInsertTypeDraft    DocumentInsertType = "draft"
	DocumentInsertTypeInvoice  DocumentInsertType = "invoice"
	DocumentInsertTypeProforma DocumentInsertType = "proforma"
)

// Defines values for DocumentLanguage.
const (
	De DocumentLanguage = "de"
	En DocumentLanguage = "en"
	Fr DocumentLanguage = "fr"
	Hr DocumentLanguage = "hr"
	Hu DocumentLanguage = "hu"
	It DocumentLanguage = "it"
	Ro DocumentLanguage = "ro"
	Sk DocumentLanguage = "sk"
	Us DocumentLanguage = "us"
)

// Defines values for DocumentNotificationStatus.
const (
	DocumentNotificationStatusClosed     DocumentNotificationStatus = "closed"
	DocumentNotificationStatusDownloaded DocumentNotificationStatus = "downloaded"
	DocumentNotificationStatusFailed     DocumentNotificationStatus = "failed"
	DocumentNotificationStatusNone       DocumentNotificationStatus = "none"
	DocumentNotificationStatusOpened     DocumentNotificationStatus = "opened"
	DocumentNotificationStatusReaded     DocumentNotificationStatus = "readed"
)

// Defines values for DocumentType.
const (
	DocumentTypeAdvance             DocumentType = "advance"
	DocumentTypeCancellation        DocumentType = "cancellation"
	DocumentTypeCertOfCompletion    DocumentType = "cert_of_completion"
	DocumentTypeDCertOfCompletion   DocumentType = "d_cert_of_completion"
	DocumentTypeDossier             DocumentType = "dossier"
	DocumentTypeDraft               DocumentType = "draft"
	DocumentTypeDraftOffer          DocumentType = "draft_offer"
	DocumentTypeDraftOrderForm      DocumentType = "draft_order_form"
	DocumentTypeDraftWaybill        DocumentType = "draft_waybill"
	DocumentTypeInvoice             DocumentType = "invoice"
	DocumentTypeModification        DocumentType = "modification"
	DocumentTypeOffer               DocumentType = "offer"
	DocumentTypeOrderForm           DocumentType = "order_form"
	DocumentTypeProforma            DocumentType = "proforma"
	DocumentTypeReceipt             DocumentType = "receipt"
	DocumentTypeReceiptCancellation DocumentType = "receipt_cancellation"
	DocumentTypeWaybill             DocumentType = "waybill"
)

// Defines values for Entitlement.
const (
	EntitlementAAM          Entitlement = "AAM"
	EntitlementANTIQUES     Entitlement = "ANTIQUES"
	EntitlementARTWORK      Entitlement = "ARTWORK"
	EntitlementATK          Entitlement = "ATK"
	EntitlementEAM          Entitlement = "EAM"
	EntitlementEUE          Entitlement = "EUE"
	EntitlementEUFAD37      Entitlement = "EUFAD37"
	EntitlementEUFADE       Entitlement = "EUFADE"
	EntitlementHO           Entitlement = "HO"
	EntitlementKBAET        Entitlement = "KBAET"
	EntitlementNAM1         Entitlement = "NAM_1"
	EntitlementNAM2         Entitlement = "NAM_2"
	EntitlementSECONDHAND   Entitlement = "SECOND_HAND"
	EntitlementTAM          Entitlement = "TAM"
	EntitlementTRAVELAGENCY Entitlement = "TRAVEL_AGENCY"
)

// Defines values for Feature.
const (
	ApiLimitBasic           Feature = "api_limit_basic"
	ApiLimitPro             Feature = "api_limit_pro"
	ApiLimitStandard        Feature = "api_limit_standard"
	BanksyncPlus            Feature = "banksync_plus"
	CampaignManagerBasic    Feature = "campaign_manager_basic"
	CampaignManagerStandard Feature = "campaign_manager_standard"
	CeginfoEnterprise       Feature = "ceginfo_enterprise"
	CeginfoPro              Feature = "ceginfo_pro"
	CeginfoStandard         Feature = "ceginfo_standard"
	Innovator               Feature = "innovator"
	LimitIncrease           Feature = "limit_increase"
	Master                  Feature = "master"
	PartnermonitorBasic     Feature = "partnermonitor_basic"
	PartnermonitorPro       Feature = "partnermonitor_pro"
	PartnermonitorStandard  Feature = "partnermonitor_standard"
	Softpos                 Feature = "softpos"
	SubscriptionBasic       Feature = "subscription_basic"
	SubscriptionPro         Feature = "subscription_pro"
	SubscriptionStandard    Feature = "subscription_standard"
	TendermonitorStandard   Feature = "tendermonitor_standard"
	TendermonitorVip        Feature = "tendermonitor_vip"
	Whitelabel              Feature = "whitelabel"
)

// Defines values for OnlinePayment.
const (
	OnlinePaymentBarion    OnlinePayment = "Barion"
	OnlinePaymentEmpty     OnlinePayment = ""
	OnlinePaymentNo        OnlinePayment = "no"
	OnlinePaymentSimplePay OnlinePayment = "SimplePay"
)

// Defines values for OnlineSzamlaStatusEnum.
const (
	OnlineSzamlaStatusEnumAborted                      OnlineSzamlaStatusEnum = "aborted"
	OnlineSzamlaStatusEnumDone                         OnlineSzamlaStatusEnum = "done"
	OnlineSzamlaStatusEnumEmptyOrganizationCountryCode OnlineSzamlaStatusEnum = "empty_organization_country_code"
	OnlineSzamlaStatusEnumEmptyPartnerCountryCode      OnlineSzamlaStatusEnum = "empty_partner_country_code"
	OnlineSzamlaStatusEnumEmptyTax                     OnlineSzamlaStatusEnum = "empty_tax"
	OnlineSzamlaStatusEnumForbidden                    OnlineSzamlaStatusEnum = "forbidden"
	OnlineSzamlaStatusEnumInvalidAddress               OnlineSzamlaStatusEnum = "invalid_address"
	OnlineSzamlaStatusEnumInvalidClient                OnlineSzamlaStatusEnum = "invalid_client"
	OnlineSzamlaStatusEnumInvalidConversionRate        OnlineSzamlaStatusEnum = "invalid_conversion_rate"
	OnlineSzamlaStatusEnumInvalidCustomer              OnlineSzamlaStatusEnum = "invalid_customer"
	OnlineSzamlaStatusEnumInvalidInvoiceReference      OnlineSzamlaStatusEnum = "invalid_invoice_reference"
	OnlineSzamlaStatusEnumInvalidPostalcode            OnlineSzamlaStatusEnum = "invalid_postalcode"
	OnlineSzamlaStatusEnumInvalidSecurityUser          OnlineSzamlaStatusEnum = "invalid_security_user"
	OnlineSzamlaStatusEnumInvalidTax                   OnlineSzamlaStatusEnum = "invalid_tax"
	OnlineSzamlaStatusEnumInvalidTaxNumber             OnlineSzamlaStatusEnum = "invalid_tax_number"
	OnlineSzamlaStatusEnumInvalidUserRelation          OnlineSzamlaStatusEnum = "invalid_user_relation"
	OnlineSzamlaStatusEnumInvalidVatData               OnlineSzamlaStatusEnum = "invalid_vat_data"
	OnlineSzamlaStatusEnumInvoiceNumberNotUnique       OnlineSzamlaStatusEnum = "invoice_number_not_unique"
	OnlineSzamlaStatusEnumKobakProcessing              OnlineSzamlaStatusEnum = "kobak_processing"
	OnlineSzamlaStatusEnumMissingDocumentItemName      OnlineSzamlaStatusEnum = "missing_document_item_name"
	OnlineSzamlaStatusEnumNavWarn                      OnlineSzamlaStatusEnum = "nav_warn"
	OnlineSzamlaStatusEnumNoOnlineSzamlaSettings       OnlineSzamlaStatusEnum = "no_online_szamla_settings"
	OnlineSzamlaStatusEnumNoSendByUser                 OnlineSzamlaStatusEnum = "no_send_by_user"
	OnlineSzamlaStatusEnumNonExistTaxNumber            OnlineSzamlaStatusEnum = "non_exist_tax_number"
	OnlineSzamlaStatusEnumNotChecked                   OnlineSzamlaStatusEnum = "not_checked"
	OnlineSzamlaStatusEnumNotRegisteredCustomer        OnlineSzamlaStatusEnum = "not_registered_customer"
	OnlineSzamlaStatusEnumNotUnique                    OnlineSzamlaStatusEnum = "not unique"
	OnlineSzamlaStatusEnumProcessing                   OnlineSzamlaStatusEnum = "processing"
	OnlineSzamlaStatusEnumReceived                     OnlineSzamlaStatusEnum = "received"
	OnlineSzamlaStatusEnumSaved                        OnlineSzamlaStatusEnum = "saved"
	OnlineSzamlaStatusEnumSendFailed                   OnlineSzamlaStatusEnum = "send_failed"
	OnlineSzamlaStatusEnumSent                         OnlineSzamlaStatusEnum = "sent"
	OnlineSzamlaStatusEnumStarted                      OnlineSzamlaStatusEnum = "started"
	OnlineSzamlaStatusEnumTechnicalError               OnlineSzamlaStatusEnum = "technical_error"
	OnlineSzamlaStatusEnumUnderTaxLimit                OnlineSzamlaStatusEnum = "under_tax_limit"
	OnlineSzamlaStatusEnumUserHasInvalidKobak          OnlineSzamlaStatusEnum = "user_has_invalid_kobak"
	OnlineSzamlaStatusEnumUserHasnotKobak              OnlineSzamlaStatusEnum = "user_hasnot_kobak"
	OnlineSzamlaStatusEnumValidationOk                 OnlineSzamlaStatusEnum = "validation_ok"
)

// Defines values for PartnerTaxType.
const (
	PartnerTaxTypeEmpty        PartnerTaxType = ""
	PartnerTaxTypeFOREIGN      PartnerTaxType = "FOREIGN"
	PartnerTaxTypeHASTAXNUMBER PartnerTaxType = "HAS_TAX_NUMBER"
	PartnerTaxTypeNOTAXNUMBER  PartnerTaxType = "NO_TAX_NUMBER"
)

// Defines values for PaymentMethod.
const (
	PaymentMethodAruhitel       PaymentMethod = "aruhitel"
	PaymentMethodBankcard       PaymentMethod = "bankcard"
	PaymentMethodBarion         PaymentMethod = "barion"
	PaymentMethodBarter         PaymentMethod = "barter"
	PaymentMethodCash           PaymentMethod = "cash"
	PaymentMethodCashOnDelivery PaymentMethod = "cash_on_delivery"
	PaymentMethodCoupon         PaymentMethod = "coupon"
	PaymentMethodEloreUtalas    PaymentMethod = "elore_utalas"
	PaymentMethodEpKartya       PaymentMethod = "ep_kartya"
	PaymentMethodKompenzacio    PaymentMethod = "kompenzacio"
	PaymentMethodLevonas        PaymentMethod = "levonas"
	PaymentMethodOnlineBankcard PaymentMethod = "online_bankcard"
	PaymentMethodOther          PaymentMethod = "other"
	PaymentMethodPaylike        PaymentMethod = "paylike"
	PaymentMethodPayoneer       PaymentMethod = "payoneer"
	PaymentMethodPaypal         PaymentMethod = "paypal"
	PaymentMethodPaypalUtolag   PaymentMethod = "paypal_utolag"
	PaymentMethodPayu           PaymentMethod = "payu"
	PaymentMethodPickPackPont   PaymentMethod = "pick_pack_pont"
	PaymentMethodPostaiCsekk    PaymentMethod = "postai_csekk"
	PaymentMethodPostautalvany  PaymentMethod = "postautalvany"
	PaymentMethodSkrill         PaymentMethod = "skrill"
	PaymentMethodSzepCard       PaymentMethod = "szep_card"
	PaymentMethodTransferwise   PaymentMethod = "transferwise"
	PaymentMethodUpwork         PaymentMethod = "upwork"
	PaymentMethodUtalvany       PaymentMethod = "utalvany"
	PaymentMethodValto          PaymentMethod = "valto"
	PaymentMethodWireTransfer   PaymentMethod = "wire_transfer"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusExpired       PaymentStatus = "expired"
	PaymentStatusNone          PaymentStatus = "none"
	PaymentStatusOutstanding   PaymentStatus = "outstanding"
	PaymentStatusPaid          PaymentStatus = "paid"
	PaymentStatusPartiallyPaid PaymentStatus = "partially_paid"
)

// Defines values for PaymentStatusSpending.
const (
	PaymentStatusSpendingAll    PaymentStatusSpending = "all"
	PaymentStatusSpendingPaid   PaymentStatusSpending = "paid"
	PaymentStatusSpendingUnpaid PaymentStatusSpending = "unpaid"
)

// Defines values for Round.
const (
	RoundFive Round = "five"
	RoundNone Round = "none"
	RoundOne  Round = "one"
	RoundTen  Round = "ten"
)

// Defines values for Source.
const (
	SourceAll    Source = "all"
	SourceManual Source = "manual"
	SourceNav    Source = "nav"
)

// Defines values for SpendingPaymentMethod.
const (
	Aruhitel       SpendingPaymentMethod = "aruhitel"
	Bankcard       SpendingPaymentMethod = "bankcard"
	Barion         SpendingPaymentMethod = "barion"
	Barter         SpendingPaymentMethod = "barter"
	Cash           SpendingPaymentMethod = "cash"
	CashOnDelivery SpendingPaymentMethod = "cash_on_delivery"
	Coupon         SpendingPaymentMethod = "coupon"
	EloreUtalas    SpendingPaymentMethod = "elore_utalas"
	EpKartya       SpendingPaymentMethod = "ep_kartya"
	Kompenzacio    SpendingPaymentMethod = "kompenzacio"
	Levonas        SpendingPaymentMethod = "levonas"
	OnlineBankcard SpendingPaymentMethod = "online_bankcard"
	Other          SpendingPaymentMethod = "other"
	Paylike        SpendingPaymentMethod = "paylike"
	Payoneer       SpendingPaymentMethod = "payoneer"
	Paypal         SpendingPaymentMethod = "paypal"
	PaypalUtolag   SpendingPaymentMethod = "paypal_utolag"
	Payu           SpendingPaymentMethod = "payu"
	PickPackPont   SpendingPaymentMethod = "pick_pack_pont"
	PostaiCsekk    SpendingPaymentMethod = "postai_csekk"
	Postautalvany  SpendingPaymentMethod = "postautalvany"
	Skrill         SpendingPaymentMethod = "skrill"
	SzepCard       SpendingPaymentMethod = "szep_card"
	Transferwise   SpendingPaymentMethod = "transferwise"
	Upwork         SpendingPaymentMethod = "upwork"
	Utalvany       SpendingPaymentMethod = "utalvany"
	Valto          SpendingPaymentMethod = "valto"
	WireTransfer   SpendingPaymentMethod = "wire_transfer"
)

// Defines values for UnitPriceType.
const (
	Gross UnitPriceType = "gross"
	Net   UnitPriceType = "net"
)

// Defines values for Vat.
const (
	VatAAM  Vat = "AAM"
	VatAM   Vat = "AM"
	VatEU   Vat = "EU"
	VatEUK  Vat = "EUK"
	VatFAD  Vat = "FAD"
	VatFAFA Vat = "F.AFA"
	VatKAFA Vat = "K.AFA"
	VatMAA  Vat = "MAA"
	VatN0   Vat = "0%"
	VatN1   Vat = "1%"
	VatN10  Vat = "10%"
	VatN11  Vat = "11%"
	VatN12  Vat = "12%"
	VatN13  Vat = "13%"
	VatN14  Vat = "14%"
	VatN15  Vat = "15%"
	VatN16  Vat = "16%"
	VatN17  Vat = "17%"
	VatN18  Vat = "18%"
	VatN19  Vat = "19%"
	VatN2   Vat = "2%"
	VatN20  Vat = "20%"
	VatN21  Vat = "21%"
	VatN22  Vat = "22%"
	VatN23  Vat = "23%"
	VatN24  Vat = "24%"
	VatN25  Vat = "25%"
	VatN26  Vat = "26%"
	VatN27  Vat = "27%"
	VatN3   Vat = "3%"
	VatN4   Vat = "4%"
	VatN5   Vat = "5%"
	VatN55  Vat = "5,5%"
	VatN6   Vat = "6%"
	VatN7   Vat = "7%"
	VatN77  Vat = "7,7%"
	VatN8   Vat = "8%"
	VatN9   Vat = "9%"
	VatN95  Vat = "9,5%"
	VatTAM  Vat = "TAM"
	VatÁKK  Vat = "ÁKK"
	VatÁTHK Vat = "ÁTHK"
)

// Defines values for PosPrintParamsSize.
const (
	N58 PosPrintParamsSize = 58
	N80 PosPrintParamsSize = 80
)

// Address defines model for Address.
type Address struct {
	Address     string  `json:"address"`
	City        string  `json:"city"`
	CountryCode Country `json:"country_code"`
	PostCode    string  `json:"post_code"`
}

// BankAccount defines model for BankAccount.
type BankAccount struct {
	AccountNumber     string   `json:"account_number"`
	AccountNumberIban *string  `json:"account_number_iban,omitempty"`
	Currency          Currency `json:"currency"`
	Id                *int     `json:"id,omitempty"`
	Name              string   `json:"name"`
	// Deprecated:
	NeedQr *bool   `json:"need_qr,omitempty"`
	Swift  *string `json:"swift,omitempty"`
}

// BankAccountList A object with a data property that contains an array of up to limit bank accounts. Each entry in the array is a separate bank account object. If no more bank accounts are available, the resulting array will be empty.
type BankAccountList struct {
	CurrentPage *int           `json:"current_page,omitempty"`
	Data        *[]BankAccount `json:"data,omitempty"`
	LastPage    *int           `json:"last_page,omitempty"`
	NextPageUrl *string        `json:"next_page_url,omitempty"`
	PerPage     *int           `json:"per_page,omitempty"`
	PrevPageUrl *string        `json:"prev_page_url,omitempty"`
	Total       *int           `json:"total,omitempty"`
}

// Category defines model for Category.
type Category string

// CheckTaxNumberMessage defines model for CheckTaxNumberMessage.
type CheckTaxNumberMessage string

// ClientError defines model for ClientError.
type ClientError struct {
	Message *string `json:"message,omitempty"`
}

// ClientErrorResponse defines model for ClientErrorResponse.
type ClientErrorResponse struct {
	Error *ClientError `json:"error,omitempty"`
}

// ConversationRate defines model for ConversationRate.
type ConversationRate struct {
	ConversationRate *float32            `json:"conversation_rate,omitempty"`
	Date             *openapi_types.Date `json:"date,omitempty"`
	FromCurrency     *Currency           `json:"from_currency,omitempty"`
	ToCurrency       *Currency           `json:"to_currency,omitempty"`
}

// CorrectionType defines model for CorrectionType.
type CorrectionType string

// Country defines model for Country.
type Country string

// CreateDocumentExport defines model for CreateDocumentExport.
type CreateDocumentExport struct {
	DocumentBlockId     *int                        `json:"document_block_id,omitempty"`
	EndDate             openapi_types.Date          `json:"end_date"`
	ExportType          DocumentExportType          `json:"export_type"`
	FilterExtra         *DocumentExportFilterExtra  `json:"filter_extra,omitempty"`
	NumberEndSequence   *int                        `json:"number_end_sequence,omitempty"`
	NumberEndYear       *int                        `json:"number_end_year,omitempty"`
	NumberStartSequence *int                        `json:"number_start_sequence,omitempty"`
	NumberStartYear     *int                        `json:"number_start_year,omitempty"`
	OtherOptions        *DocumentExportOtherOptions `json:"other_options,omitempty"`
	PaymentMethod       *PaymentMethod              `json:"payment_method,omitempty"`
	QueryType           DocumentExportQueryType     `json:"query_type"`
	SortBy              *DocumentExportSortBy       `json:"sort_by,omitempty"`
	StartDate           openapi_types.Date          `json:"start_date"`
}

// Currency defines model for Currency.
type Currency string

// DateType defines model for DateType.
type DateType string

// Discount defines model for Discount.
type Discount struct {
	Type  *DiscountType `json:"type,omitempty"`
	Value *int          `json:"value,omitempty"`
}

// DiscountType defines model for DiscountType.
type DiscountType string

// Document Document object representing your invoice. NOTE: partner property is deprecated. Please use document_partner instead.
type Document struct {
	// BlockId DocumentBlock's identifier.
	BlockId         *int                `json:"block_id,omitempty"`
	Cancelled       *bool               `json:"cancelled,omitempty"`
	Comment         *string             `json:"comment,omitempty"`
	ConversionRate  *float32            `json:"conversion_rate,omitempty"`
	CorrectionType  *CorrectionType     `json:"correction_type,omitempty"`
	Currency        *Currency           `json:"currency,omitempty"`
	Discount        *Discount           `json:"discount,omitempty"`
	DocumentPartner *DocumentPartner    `json:"document_partner,omitempty"`
	DueDate         *openapi_types.Date `json:"due_date,omitempty"`
	Electronic      *bool               `json:"electronic,omitempty"`
	FulfillmentDate *openapi_types.Date `json:"fulfillment_date,omitempty"`

	// GrossTotal The document's gross total price.
	GrossTotal *float32 `json:"gross_total,omitempty"`

	// Id The document's unique identifier.
	Id          *int                `json:"id,omitempty"`
	InvoiceDate *openapi_types.Date `json:"invoice_date,omitempty"`

	// InvoiceNumber The document's invoice number.
	InvoiceNumber      *string                     `json:"invoice_number,omitempty"`
	Items              *[]DocumentItem             `json:"items,omitempty"`
	Language           *DocumentLanguage           `json:"language,omitempty"`
	NotificationStatus *DocumentNotificationStatus `json:"notification_status,omitempty"`
	OnlineSzamlaStatus *OnlineSzamlaStatusEnum     `json:"online_szamla_status,omitempty"`
	Organization       *DocumentOrganization       `json:"organization,omitempty"`
	PaidDate           *openapi_types.Date         `json:"paid_date,omitempty"`
	Partner            *Partner                    `json:"partner,omitempty"`
	PaymentMethod      *PaymentMethod              `json:"payment_method,omitempty"`
	PaymentStatus      *PaymentStatus              `json:"payment_status,omitempty"`
	RelatedDocuments   *[]DocumentAncestor         `json:"related_documents,omitempty"`
	Settings           *DocumentSettings           `json:"settings,omitempty"`
	Summary            *DocumentSummary            `json:"summary,omitempty"`
	Tags               *[]string                   `json:"tags,omitempty"`
	Type               *DocumentType               `json:"type,omitempty"`
}

// DocumentAncestor An object representing related documents to another document.
type DocumentAncestor struct {
	// Id Unique identifier of the related document.
	Id *int `json:"id,omitempty"`

	// InvoiceNumber Invoice number of the related document.
	InvoiceNumber *string `json:"invoice_number,omitempty"`
}

// DocumentBankAccount defines model for DocumentBankAccount.
type DocumentBankAccount struct {
	AccountNumber     string  `json:"account_number"`
	AccountNumberIban *string `json:"account_number_iban,omitempty"`
	Id                *int    `json:"id"`
	Name              string  `json:"name"`
	Swift             *string `json:"swift,omitempty"`
}

// DocumentBlock defines model for DocumentBlock.
type DocumentBlock struct {
	CustomField1 *string            `json:"custom_field1,omitempty"`
	CustomField2 *string            `json:"custom_field2,omitempty"`
	Id           *int               `json:"id,omitempty"`
	Name         *string            `json:"name,omitempty"`
	Prefix       *string            `json:"prefix,omitempty"`
	Type         *DocumentBlockType `json:"type,omitempty"`
}

// DocumentBlockList A object with a data property that contains an array of up to limit document blocks. Each entry in the array is a separate document block object. If no more document block are available, the resulting array will be empty.
type DocumentBlockList struct {
	CurrentPage *int             `json:"current_page,omitempty"`
	Data        *[]DocumentBlock `json:"data,omitempty"`
	LastPage    *int             `json:"last_page,omitempty"`
	NextPageUrl *string          `json:"next_page_url,omitempty"`
	PerPage     *int             `json:"per_page,omitempty"`
	PrevPageUrl *string          `json:"prev_page_url,omitempty"`
	Total       *int             `json:"total,omitempty"`
}

// DocumentBlockType defines model for DocumentBlockType.
type DocumentBlockType string

// DocumentCancellation defines model for DocumentCancellation.
type DocumentCancellation struct {
	CancellationReason     *string `json:"cancellation_reason,omitempty"`
	CancellationRecipients *string `json:"cancellation_recipients,omitempty"`
}

// DocumentExportFilterExtra defines model for DocumentExportFilterExtra.
type DocumentExportFilterExtra struct {
	ForintsoftKonyvelesiNaploSzam *string                  `json:"forintsoft_konyvelesi_naplo_szam,omitempty"`
	LedgerNumber                  *LedgerNumberInformation `json:"ledger_number,omitempty"`
	NegativeLedgerNumber          *string                  `json:"negative_ledger_number,omitempty"`
	NovitaxNaplokod               *string                  `json:"novitax_naplokod,omitempty"`
	PositiveLedgerNumber          *string                  `json:"positive_ledger_number,omitempty"`
	RlbKata                       *bool                    `json:"rlb_kata,omitempty"`
	RlbNote                       *string                  `json:"rlb_note,omitempty"`
	TensoftVkod                   *string                  `json:"tensoft_vkod,omitempty"`
	UseGrossValues                *bool                    `json:"use_gross_values,omitempty"`
}

// DocumentExportId defines model for DocumentExportId.
type DocumentExportId struct {
	Id *string `json:"id,omitempty"`
}

// DocumentExportOtherOptions defines model for DocumentExportOtherOptions.
type DocumentExportOtherOptions string

// DocumentExportQueryType defines model for DocumentExportQueryType.
type DocumentExportQueryType string

// DocumentExportSortBy defines model for DocumentExportSortBy.
type DocumentExportSortBy string

// DocumentExportStatus defines model for DocumentExportStatus.
type DocumentExportStatus struct {
	Id      *string                    `json:"id,omitempty"`
	Message *string                    `json:"message,omitempty"`
	State   *DocumentExportStatusState `json:"state,omitempty"`
}

// DocumentExportStatusState defines model for DocumentExportStatusState.
type DocumentExportStatusState string

// DocumentExportType defines model for DocumentExportType.
type DocumentExportType string

// DocumentForm defines model for DocumentForm.
type DocumentForm string

// DocumentFormat defines model for DocumentFormat.
type DocumentFormat string

// DocumentInsert defines model for DocumentInsert.
type DocumentInsert struct {
	AdvanceInvoice  *[]int                       `json:"advance_invoice,omitempty"`
	BankAccountId   *int                         `json:"bank_account_id,omitempty"`
	BlockId         int                          `json:"block_id"`
	Comment         *string                      `json:"comment,omitempty"`
	ConversionRate  *float32                     `json:"conversion_rate,omitempty"`
	Currency        Currency                     `json:"currency"`
	Discount        *Discount                    `json:"discount,omitempty"`
	DueDate         openapi_types.Date           `json:"due_date"`
	Electronic      *bool                        `json:"electronic,omitempty"`
	FulfillmentDate openapi_types.Date           `json:"fulfillment_date"`
	InstantPayment  *bool                        `json:"instant_payment,omitempty"`
	Items           *[]DocumentInsert_Items_Item `json:"items,omitempty"`
	Language        DocumentLanguage             `json:"language"`
	Paid            *bool                        `json:"paid,omitempty"`
	PartnerId       int                          `json:"partner_id"`
	PaymentMethod   PaymentMethod                `json:"payment_method"`
	Settings        *DocumentSettings            `json:"settings,omitempty"`
	Type            DocumentInsertType           `json:"type"`
	VendorId        *string                      `json:"vendor_id,omitempty"`
}

// DocumentInsert_Items_Item defines model for DocumentInsert.items.Item.
type DocumentInsert_Items_Item struct {
	union json.RawMessage
}

// DocumentInsertType defines model for DocumentInsertType.
type DocumentInsertType string

// DocumentItem defines model for DocumentItem.
type DocumentItem struct {
	Comment *string `json:"comment,omitempty"`

	// Entitlement
	// * `AAM` - Alanyi adómentesség
	// * `ANTIQUES` - Különbözet szerinti szabályozás - gyűjteménydarabok és régiségek -
	// * `ARTWORK` - Különbözet szerinti szabályozás - műalkotások -
	// * `ATK` - Áfa tv. tárgyi hatályán kívüli ügylet
	// * `EAM` - Áfamentes termékexport, azzal egy tekintet alá eső értékesítések, nemzetközi közlekedéshez kapcsolódó áfamentes ügyletek (Áfa tv. 98-109. §)
	// * `EUE` - EU más tagállamában áfaköteles (áfa fizetésére az értékesítő köteles)
	// * `EUFAD37` - Áfa tv. 37. § (1) bekezdése alapján a szolgáltatás teljesítése helye az EU más tagállama (áfa fizetésére a vevő köteles)
	// * `EUFADE` - Áfa tv. egyéb rendelkezése szerint a teljesítés helye EU más tagállama (áfa fizetésére a vevő kötelezett)
	// * `HO` - Áfa tv. szerint EU-n kívül teljesített ügylet
	// * `KBAET` - Más tagállamba irányuló áfamentes termékértékesítés (Áfa tv. 89. §)
	// * `NAM_1` - Áfamentes közvetítői tevékenység (Áfa tv. 110. §)
	// * `NAM_2` - Termékek nemzetközi forgalmához kapcsolódó áfamentes ügylet (Áfa tv. 111-118. §)
	// * `SECOND_HAND` - Különbözet szerinti szabályozás - használt cikkek -
	// * `TAM` - Tevékenység közérdekű jellegére vagy egyéb sajátos jellegére tekintettel áfamentes (Áfa tv. 85-87.§)
	// * `TRAVEL_AGENCY` - Különbözet szerinti szabályozás - utazási irodák -
	Entitlement   *Entitlement `json:"entitlement,omitempty"`
	GrossAmount   *float32     `json:"gross_amount,omitempty"`
	Name          *string      `json:"name,omitempty"`
	NetAmount     *float32     `json:"net_amount,omitempty"`
	NetUnitAmount *float32     `json:"net_unit_amount,omitempty"`
	ProductId     *int         `json:"product_id"`
	Quantity      *float32     `json:"quantity,omitempty"`
	Unit          *string      `json:"unit,omitempty"`
	Vat           *Vat         `json:"vat,omitempty"`
	VatAmount     *float32     `json:"vat_amount,omitempty"`
}

// DocumentItemData defines model for DocumentItemData.
type DocumentItemData struct {
	Comment   *string `json:"comment,omitempty"`
	ProductId int     `json:"product_id"`
	Quantity  float32 `json:"quantity"`
}

// DocumentLanguage defines model for DocumentLanguage.
type DocumentLanguage string

// DocumentList A object with a data property that contains an array of up to limit documents. Each entry in the array is a separate document object. If no more documents are available, the resulting array will be empty.
type DocumentList struct {
	CurrentPage *int        `json:"current_page,omitempty"`
	Data        *[]Document `json:"data,omitempty"`
	LastPage    *int        `json:"last_page,omitempty"`
	NextPageUrl *string     `json:"next_page_url,omitempty"`
	PerPage     *int        `json:"per_page,omitempty"`
	PrevPageUrl *string     `json:"prev_page_url,omitempty"`
	Total       *int        `json:"total,omitempty"`
}

// DocumentNotificationStatus defines model for DocumentNotificationStatus.
type DocumentNotificationStatus string

// DocumentOrganization defines model for DocumentOrganization.
type DocumentOrganization struct {
	Address       *Address             `json:"address,omitempty"`
	BankAccount   *DocumentBankAccount `json:"bank_account,omitempty"`
	CashSettled   *bool                `json:"cash_settled,omitempty"`
	EuTaxNumber   *string              `json:"eu_tax_number,omitempty"`
	EvNumber      *string              `json:"ev_number,omitempty"`
	Name          *string              `json:"name,omitempty"`
	SmallTaxpayer *bool                `json:"small_taxpayer,omitempty"`
	TaxNumber     *string              `json:"tax_number,omitempty"`
}

// DocumentPartner defines model for DocumentPartner.
type DocumentPartner struct {
	AccountNumber *string         `json:"account_number,omitempty"`
	Address       *Address        `json:"address,omitempty"`
	Emails        *[]string       `json:"emails,omitempty"`
	Iban          *string         `json:"iban,omitempty"`
	Id            *int            `json:"id,omitempty"`
	Name          *string         `json:"name,omitempty"`
	Phone         *string         `json:"phone,omitempty"`
	Swift         *string         `json:"swift,omitempty"`
	TaxType       *PartnerTaxType `json:"tax_type,omitempty"`
	Taxcode       *string         `json:"taxcode,omitempty"`
}

// DocumentProductData defines model for DocumentProductData.
type DocumentProductData struct {
	Comment *string `json:"comment,omitempty"`

	// Entitlement
	// * `AAM` - Alanyi adómentesség
	// * `ANTIQUES` - Különbözet szerinti szabályozás - gyűjteménydarabok és régiségek -
	// * `ARTWORK` - Különbözet szerinti szabályozás - műalkotások -
	// * `ATK` - Áfa tv. tárgyi hatályán kívüli ügylet
	// * `EAM` - Áfamentes termékexport, azzal egy tekintet alá eső értékesítések, nemzetközi közlekedéshez kapcsolódó áfamentes ügyletek (Áfa tv. 98-109. §)
	// * `EUE` - EU más tagállamában áfaköteles (áfa fizetésére az értékesítő köteles)
	// * `EUFAD37` - Áfa tv. 37. § (1) bekezdése alapján a szolgáltatás teljesítése helye az EU más tagállama (áfa fizetésére a vevő köteles)
	// * `EUFADE` - Áfa tv. egyéb rendelkezése szerint a teljesítés helye EU más tagállama (áfa fizetésére a vevő kötelezett)
	// * `HO` - Áfa tv. szerint EU-n kívül teljesített ügylet
	// * `KBAET` - Más tagállamba irányuló áfamentes termékértékesítés (Áfa tv. 89. §)
	// * `NAM_1` - Áfamentes közvetítői tevékenység (Áfa tv. 110. §)
	// * `NAM_2` - Termékek nemzetközi forgalmához kapcsolódó áfamentes ügylet (Áfa tv. 111-118. §)
	// * `SECOND_HAND` - Különbözet szerinti szabályozás - használt cikkek -
	// * `TAM` - Tevékenység közérdekű jellegére vagy egyéb sajátos jellegére tekintettel áfamentes (Áfa tv. 85-87.§)
	// * `TRAVEL_AGENCY` - Különbözet szerinti szabályozás - utazási irodák -
	Entitlement   *Entitlement  `json:"entitlement,omitempty"`
	Name          string        `json:"name"`
	Quantity      float32       `json:"quantity"`
	Unit          string        `json:"unit"`
	UnitPrice     float32       `json:"unit_price"`
	UnitPriceType UnitPriceType `json:"unit_price_type"`
	Vat           Vat           `json:"vat"`
}

// DocumentPublicUrl defines model for DocumentPublicUrl.
type DocumentPublicUrl struct {
	PublicUrl *string `json:"public_url,omitempty"`
}

// DocumentSettings defines model for DocumentSettings.
type DocumentSettings struct {
	InstantPayment              *bool          `json:"instant_payment,omitempty"`
	MediatedService             *bool          `json:"mediated_service,omitempty"`
	NoSendOnlineszamlaByUser    *bool          `json:"no_send_onlineszamla_by_user,omitempty"`
	OnlinePayment               *OnlinePayment `json:"online_payment,omitempty"`
	OrderNumber                 *string        `json:"order_number,omitempty"`
	PlaceId                     *int           `json:"place_id"`
	Round                       *Round         `json:"round,omitempty"`
	SelectedType                *DocumentType  `json:"selected_type,omitempty"`
	WithoutFinancialFulfillment *bool          `json:"without_financial_fulfillment,omitempty"`
}

// DocumentSummary defines model for DocumentSummary.
type DocumentSummary struct {
	GrossAmountLocal *float32                  `json:"gross_amount_local,omitempty"`
	NetAmount        *float32                  `json:"net_amount,omitempty"`
	NetAmountLocal   *float32                  `json:"net_amount_local,omitempty"`
	VatAmount        *float32                  `json:"vat_amount,omitempty"`
	VatAmountLocal   *float32                  `json:"vat_amount_local,omitempty"`
	VatRateSummary   *[]DocumentVatRateSummary `json:"vat_rate_summary,omitempty"`
}

// DocumentType defines model for DocumentType.
type DocumentType string

// DocumentVatRateSummary defines model for DocumentVatRateSummary.
type DocumentVatRateSummary struct {
	VatName               *string  `json:"vat_name,omitempty"`
	VatPercentage         *float32 `json:"vat_percentage,omitempty"`
	VatRateGrossAmount    *float32 `json:"vat_rate_gross_amount,omitempty"`
	VatRateNetAmount      *float32 `json:"vat_rate_net_amount,omitempty"`
	VatRateVatAmount      *float32 `json:"vat_rate_vat_amount,omitempty"`
	VatRateVatAmountLocal *float32 `json:"vat_rate_vat_amount_local,omitempty"`
}

// Entitlement
// * `AAM` - Alanyi adómentesség
// * `ANTIQUES` - Különbözet szerinti szabályozás - gyűjteménydarabok és régiségek -
// * `ARTWORK` - Különbözet szerinti szabályozás - műalkotások -
// * `ATK` - Áfa tv. tárgyi hatályán kívüli ügylet
// * `EAM` - Áfamentes termékexport, azzal egy tekintet alá eső értékesítések, nemzetközi közlekedéshez kapcsolódó áfamentes ügyletek (Áfa tv. 98-109. §)
// * `EUE` - EU más tagállamában áfaköteles (áfa fizetésére az értékesítő köteles)
// * `EUFAD37` - Áfa tv. 37. § (1) bekezdése alapján a szolgáltatás teljesítése helye az EU más tagállama (áfa fizetésére a vevő köteles)
// * `EUFADE` - Áfa tv. egyéb rendelkezése szerint a teljesítés helye EU más tagállama (áfa fizetésére a vevő kötelezett)
// * `HO` - Áfa tv. szerint EU-n kívül teljesített ügylet
// * `KBAET` - Más tagállamba irányuló áfamentes termékértékesítés (Áfa tv. 89. §)
// * `NAM_1` - Áfamentes közvetítői tevékenység (Áfa tv. 110. §)
// * `NAM_2` - Termékek nemzetközi forgalmához kapcsolódó áfamentes ügylet (Áfa tv. 111-118. §)
// * `SECOND_HAND` - Különbözet szerinti szabályozás - használt cikkek -
// * `TAM` - Tevékenység közérdekű jellegére vagy egyéb sajátos jellegére tekintettel áfamentes (Áfa tv. 85-87.§)
// * `TRAVEL_AGENCY` - Különbözet szerinti szabályozás - utazási irodák -
type Entitlement string

// Feature defines model for Feature.
type Feature string

// Id defines model for Id.
type Id struct {
	Id       *int `json:"id,omitempty"`
	LegacyId *int `json:"legacy_id,omitempty"`
}

// InvoiceSettings defines model for InvoiceSettings.
type InvoiceSettings struct {
	Comment         *string             `json:"comment,omitempty"`
	DocumentFormat  *DocumentFormat     `json:"document_format,omitempty"`
	DocumentType    *DocumentType       `json:"document_type,omitempty"`
	DueDate         *openapi_types.Date `json:"due_date,omitempty"`
	FulfillmentDate *openapi_types.Date `json:"fulfillment_date,omitempty"`
}

// LedgerNumberInformation defines model for LedgerNumberInformation.
type LedgerNumberInformation struct {
	Afa     *string `json:"afa,omitempty"`
	Bevetel *string `json:"bevetel,omitempty"`
	Penztar *string `json:"penztar,omitempty"`
	Vevo    *string `json:"vevo,omitempty"`
}

// ModificationDocumentInsert defines model for ModificationDocumentInsert.
type ModificationDocumentInsert struct {
	Comment                     *string                                  `json:"comment,omitempty"`
	DueDate                     *openapi_types.Date                      `json:"due_date,omitempty"`
	Items                       *[]ModificationDocumentInsert_Items_Item `json:"items,omitempty"`
	PaymentMethod               *PaymentMethod                           `json:"payment_method,omitempty"`
	WithoutFinancialFulfillment *bool                                    `json:"without_financial_fulfillment,omitempty"`
}

// ModificationDocumentInsert_Items_Item defines model for ModificationDocumentInsert.items.Item.
type ModificationDocumentInsert_Items_Item struct {
	union json.RawMessage
}

// OnlinePayment defines model for OnlinePayment.
type OnlinePayment string

// OnlineSzamlaStatus defines model for OnlineSzamlaStatus.
type OnlineSzamlaStatus struct {
	Messages      *[]OnlineSzamlaStatusMessage `json:"messages,omitempty"`
	Status        *string                      `json:"status,omitempty"`
	TransactionId *string                      `json:"transaction_id,omitempty"`
}

// OnlineSzamlaStatusEnum defines model for OnlineSzamlaStatusEnum.
type OnlineSzamlaStatusEnum string

// OnlineSzamlaStatusMessage defines model for OnlineSzamlaStatusMessage.
type OnlineSzamlaStatusMessage struct {
	HumanReadableMessage *string `json:"human_readable_message,omitempty"`
	ValidationErrorCode  *string `json:"validation_error_code,omitempty"`
	ValidationResultCode *string `json:"validation_result_code,omitempty"`
}

// OrganizationData defines model for OrganizationData.
type OrganizationData struct {
	Subscription *Subscription `json:"subscription,omitempty"`
	TaxCode      *string       `json:"tax_code,omitempty"`
}

// Partner defines model for Partner.
type Partner struct {
	AccountNumber         *string                       `json:"account_number,omitempty"`
	Address               *Address                      `json:"address,omitempty"`
	CustomBillingSettings *PartnerCustomBillingSettings `json:"custom_billing_settings,omitempty"`
	Emails                *[]string                     `json:"emails,omitempty"`
	GeneralLedgerNumber   *string                       `json:"general_ledger_number,omitempty"`

	// GroupMemberTaxNumber The tax number of group member. Send tax number for update. Send empty string for delete. Ignored if omitted.
	GroupMemberTaxNumber *string         `json:"group_member_tax_number,omitempty"`
	Iban                 *string         `json:"iban,omitempty"`
	Id                   *int            `json:"id,omitempty"`
	Name                 *string         `json:"name,omitempty"`
	Phone                *string         `json:"phone,omitempty"`
	Swift                *string         `json:"swift,omitempty"`
	TaxType              *PartnerTaxType `json:"tax_type,omitempty"`
	Taxcode              *string         `json:"taxcode,omitempty"`
}

// PartnerCustomBillingSettings defines model for PartnerCustomBillingSettings.
type PartnerCustomBillingSettings struct {
	Discount             *Discount         `json:"discount,omitempty"`
	DocumentCurrency     *Currency         `json:"document_currency,omitempty"`
	DocumentForm         *DocumentForm     `json:"document_form,omitempty"`
	DueDays              *int              `json:"due_days,omitempty"`
	PaymentMethod        *PaymentMethod    `json:"payment_method,omitempty"`
	TemplateLanguageCode *DocumentLanguage `json:"template_language_code,omitempty"`
}

// PartnerList A object with a data property that contains an array of up to limit partners. Each entry in the array is a separate partner object. If no more partners are available, the resulting array will be empty.
type PartnerList struct {
	CurrentPage *int       `json:"current_page,omitempty"`
	Data        *[]Partner `json:"data,omitempty"`
	LastPage    *int       `json:"last_page,omitempty"`
	NextPageUrl *string    `json:"next_page_url,omitempty"`
	PerPage     *int       `json:"per_page,omitempty"`
	PrevPageUrl *string    `json:"prev_page_url,omitempty"`
	Total       *int       `json:"total,omitempty"`
}

// PartnerTaxType defines model for PartnerTaxType.
type PartnerTaxType string

// PaymentHistory defines model for PaymentHistory.
type PaymentHistory struct {
	ConversionRate *float32           `json:"conversion_rate"`
	Date           openapi_types.Date `json:"date"`
	PaymentMethod  PaymentMethod      `json:"payment_method"`
	Price          float32            `json:"price"`
	VoucherNumber  *string            `json:"voucher_number"`
}

// PaymentMethod defines model for PaymentMethod.
type PaymentMethod string

// PaymentStatus defines model for PaymentStatus.
type PaymentStatus string

// PaymentStatusSpending defines model for PaymentStatusSpending.
type PaymentStatusSpending string

// Product defines model for Product.
type Product struct {
	Comment  *string  `json:"comment,omitempty"`
	Currency Currency `json:"currency"`

	// Entitlement
	// * `AAM` - Alanyi adómentesség
	// * `ANTIQUES` - Különbözet szerinti szabályozás - gyűjteménydarabok és régiségek -
	// * `ARTWORK` - Különbözet szerinti szabályozás - műalkotások -
	// * `ATK` - Áfa tv. tárgyi hatályán kívüli ügylet
	// * `EAM` - Áfamentes termékexport, azzal egy tekintet alá eső értékesítések, nemzetközi közlekedéshez kapcsolódó áfamentes ügyletek (Áfa tv. 98-109. §)
	// * `EUE` - EU más tagállamában áfaköteles (áfa fizetésére az értékesítő köteles)
	// * `EUFAD37` - Áfa tv. 37. § (1) bekezdése alapján a szolgáltatás teljesítése helye az EU más tagállama (áfa fizetésére a vevő köteles)
	// * `EUFADE` - Áfa tv. egyéb rendelkezése szerint a teljesítés helye EU más tagállama (áfa fizetésére a vevő kötelezett)
	// * `HO` - Áfa tv. szerint EU-n kívül teljesített ügylet
	// * `KBAET` - Más tagállamba irányuló áfamentes termékértékesítés (Áfa tv. 89. §)
	// * `NAM_1` - Áfamentes közvetítői tevékenység (Áfa tv. 110. §)
	// * `NAM_2` - Termékek nemzetközi forgalmához kapcsolódó áfamentes ügylet (Áfa tv. 111-118. §)
	// * `SECOND_HAND` - Különbözet szerinti szabályozás - használt cikkek -
	// * `TAM` - Tevékenység közérdekű jellegére vagy egyéb sajátos jellegére tekintettel áfamentes (Áfa tv. 85-87.§)
	// * `TRAVEL_AGENCY` - Különbözet szerinti szabályozás - utazási irodák -
	Entitlement          *Entitlement `json:"entitlement,omitempty"`
	GeneralLedgerNumber  *string      `json:"general_ledger_number,omitempty"`
	GeneralLedgerTaxcode *string      `json:"general_ledger_taxcode,omitempty"`
	Id                   *int         `json:"id,omitempty"`
	Name                 string       `json:"name"`
	NetUnitPrice         *float32     `json:"net_unit_price,omitempty"`
	Unit                 string       `json:"unit"`
	Vat                  Vat          `json:"vat"`
}

// ProductList A object with a data property that contains an array of up to limit products. Each entry in the array is a separate product object. If no more products are available, the resulting array will be empty.
type ProductList struct {
	CurrentPage *int       `json:"current_page,omitempty"`
	Data        *[]Product `json:"data,omitempty"`
	LastPage    *int       `json:"last_page,omitempty"`
	NextPageUrl *string    `json:"next_page_url,omitempty"`
	PerPage     *int       `json:"per_page,omitempty"`
	PrevPageUrl *string    `json:"prev_page_url,omitempty"`
	Total       *int       `json:"total,omitempty"`
}

// ReceiptInsert defines model for ReceiptInsert.
type ReceiptInsert struct {
	BlockId        int                         `json:"block_id"`
	ConversionRate *float32                    `json:"conversion_rate,omitempty"`
	Currency       Currency                    `json:"currency"`
	Electronic     *bool                       `json:"electronic,omitempty"`
	Emails         *[]string                   `json:"emails,omitempty"`
	Items          *[]ReceiptInsert_Items_Item `json:"items,omitempty"`
	Name           *string                     `json:"name,omitempty"`
	PartnerId      *int                        `json:"partner_id,omitempty"`
	PaymentMethod  PaymentMethod               `json:"payment_method"`
	Type           DocumentType                `json:"type"`
	VendorId       *string                     `json:"vendor_id,omitempty"`
}

// ReceiptInsert_Items_Item defines model for ReceiptInsert.items.Item.
type ReceiptInsert_Items_Item struct {
	union json.RawMessage
}

// ReceiptItemData defines model for ReceiptItemData.
type ReceiptItemData struct {
	ProductId int `json:"product_id"`
}

// ReceiptProductData defines model for ReceiptProductData.
type ReceiptProductData struct {
	Name      *string `json:"name,omitempty"`
	UnitPrice float32 `json:"unit_price"`
	Vat       Vat     `json:"vat"`
}

// Round defines model for Round.
type Round string

// SendDocument defines model for SendDocument.
type SendDocument struct {
	Emails *[]string `json:"emails,omitempty"`
}

// ServerError2 defines model for ServerError.
type ServerError2 struct {
	Message *string `json:"message,omitempty"`

	// TraceId You should send us this ID to investigate the issue.
	TraceId *string `json:"trace_id,omitempty"`
}

// ServerErrorResponse defines model for ServerErrorResponse.
type ServerErrorResponse struct {
	ServerError2 *ServerError2 `json:"error,omitempty"`
}

// ServerTime defines model for ServerTime.
type ServerTime struct {
	Epoch     *int    `json:"epoch,omitempty"`
	Formatted *string `json:"formatted,omitempty"`
	Timezone  *string `json:"timezone,omitempty"`
	W3c       *string `json:"w3c,omitempty"`
}

// Source defines model for Source.
type Source string

// Spending defines model for Spending.
type Spending struct {
	Category            *Category              `json:"category,omitempty"`
	Comment             *string                `json:"comment"`
	ConversionRate      *float32               `json:"conversion_rate,omitempty"`
	Currency            *Currency              `json:"currency,omitempty"`
	DueDate             *openapi_types.Date    `json:"due_date,omitempty"`
	FulfillmentDate     *openapi_types.Date    `json:"fulfillment_date,omitempty"`
	Id                  *int                   `json:"id,omitempty"`
	InvoiceDate         *openapi_types.Date    `json:"invoice_date,omitempty"`
	InvoiceNumber       *string                `json:"invoice_number,omitempty"`
	OrganizationId      *int                   `json:"organization_id,omitempty"`
	PaidAt              *openapi_types.Date    `json:"paid_at"`
	Partner             *SpendingPartner       `json:"partner,omitempty"`
	PaymentMethod       *SpendingPaymentMethod `json:"payment_method,omitempty"`
	TotalGross          *float32               `json:"total_gross,omitempty"`
	TotalGrossLocal     *float32               `json:"total_gross_local,omitempty"`
	TotalVatAmount      *float32               `json:"total_vat_amount,omitempty"`
	TotalVatAmountLocal *float32               `json:"total_vat_amount_local,omitempty"`
}

// SpendingList An object with a data property that contains an array of up to limit spending. Each entry in the array is a separate spending object. If no more spending are available, the resulting array will be empty.
type SpendingList struct {
	CurrentPage *int                `json:"current_page,omitempty"`
	Data        *[]SpendingListItem `json:"data,omitempty"`
	LastPage    *int                `json:"last_page,omitempty"`
	NextPageUrl *string             `json:"next_page_url,omitempty"`
	PerPage     *int                `json:"per_page,omitempty"`
	PrevPageUrl *string             `json:"prev_page_url,omitempty"`
	Total       *int                `json:"total,omitempty"`
}

// SpendingListItem defines model for SpendingListItem.
type SpendingListItem struct {
	Category            *Category              `json:"category,omitempty"`
	Comment             *string                `json:"comment"`
	ConversionRate      *float32               `json:"conversion_rate,omitempty"`
	Currency            *Currency              `json:"currency,omitempty"`
	DueDate             *openapi_types.Date    `json:"due_date,omitempty"`
	FulfillmentDate     *openapi_types.Date    `json:"fulfillment_date,omitempty"`
	Id                  *int                   `json:"id,omitempty"`
	InvoiceDate         *openapi_types.Date    `json:"invoice_date,omitempty"`
	InvoiceNumber       *string                `json:"invoice_number,omitempty"`
	IsCreatedByNav      *bool                  `json:"is_created_by_nav,omitempty"`
	OrganizationId      *int                   `json:"organization_id,omitempty"`
	PaidAt              *openapi_types.Date    `json:"paid_at"`
	Partner             *SpendingPartner       `json:"partner,omitempty"`
	PaymentMethod       *SpendingPaymentMethod `json:"payment_method,omitempty"`
	TotalGross          *float32               `json:"total_gross,omitempty"`
	TotalGrossLocal     *float32               `json:"total_gross_local,omitempty"`
	TotalVatAmount      *float32               `json:"total_vat_amount,omitempty"`
	TotalVatAmountLocal *float32               `json:"total_vat_amount_local,omitempty"`
}

// SpendingPartner defines model for SpendingPartner.
type SpendingPartner struct {
	AccountNumber        *string  `json:"account_number,omitempty"`
	Address              *Address `json:"address,omitempty"`
	GroupMemberTaxNumber *string  `json:"group_member_tax_number,omitempty"`
	Iban                 *string  `json:"iban,omitempty"`
	Id                   *int     `json:"id,omitempty"`
	InternalComment      *string  `json:"internal_comment,omitempty"`
	Name                 *string  `json:"name,omitempty"`
	Phone                *string  `json:"phone,omitempty"`
	Swift                *string  `json:"swift,omitempty"`
	TaxCode              *string  `json:"tax_code,omitempty"`
}

// SpendingPaymentMethod defines model for SpendingPaymentMethod.
type SpendingPaymentMethod string

// SpendingSave defines model for SpendingSave.
type SpendingSave struct {
	Category          Category              `json:"category"`
	Comment           *string               `json:"comment,omitempty"`
	ConversionRate    *float32              `json:"conversion_rate,omitempty"`
	Currency          Currency              `json:"currency"`
	DueDate           *openapi_types.Date   `json:"due_date,omitempty"`
	FulfillmentDate   openapi_types.Date    `json:"fulfillment_date"`
	InvoiceDate       *openapi_types.Date   `json:"invoice_date,omitempty"`
	InvoiceNumber     *string               `json:"invoice_number,omitempty"`
	PaidAt            *openapi_types.Date   `json:"paid_at,omitempty"`
	PartnerId         *int                  `json:"partner_id,omitempty"`
	PaymentMethod     SpendingPaymentMethod `json:"payment_method"`
	TotalGross        float32               `json:"total_gross"`
	TotalGrossHuf     float32               `json:"total_gross_huf"`
	TotalVatAmount    float32               `json:"total_vat_amount"`
	TotalVatAmountHuf float32               `json:"total_vat_amount_huf"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ExpirationDate *openapi_types.Date `json:"expiration_date,omitempty"`
	Features       *[]Feature          `json:"features,omitempty"`
}

// SubscriptionErrorResponse defines model for SubscriptionErrorResponse.
type SubscriptionErrorResponse struct {
	Error *ClientError `json:"error,omitempty"`
}

// TaxNumber defines model for TaxNumber.
type TaxNumber struct {
	Result    *CheckTaxNumberMessage `json:"result,omitempty"`
	TaxNumber *string                `json:"tax_number,omitempty"`
}

// TooManyRequestsResponse defines model for TooManyRequestsResponse.
type TooManyRequestsResponse struct {
	Error *ClientError `json:"error,omitempty"`
}

// UnitPriceType defines model for UnitPriceType.
type UnitPriceType string

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Field   *string `json:"field,omitempty"`
	Message *string `json:"message,omitempty"`
}

// ValidationErrorResponse defines model for ValidationErrorResponse.
type ValidationErrorResponse struct {
	Errors  *[]ValidationError `json:"errors,omitempty"`
	Message *string            `json:"message,omitempty"`
}

// Vat defines model for Vat.
type Vat string

// BadRequest defines model for BadRequest.
type BadRequest = ClientErrorResponse

// Forbidden defines model for Forbidden.
type Forbidden = ClientErrorResponse

// NotFound defines model for NotFound.
type NotFound = ClientErrorResponse

// PaymentRequired defines model for PaymentRequired.
type PaymentRequired = SubscriptionErrorResponse

// ServerError defines model for ServerError.
type ServerError = ServerErrorResponse

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = TooManyRequestsResponse

// Unauthorized defines model for Unauthorized.
type Unauthorized = ClientErrorResponse

// UnprocessableEntity defines model for UnprocessableEntity.
type UnprocessableEntity = ValidationErrorResponse

// ListBankAccountParams defines parameters for ListBankAccount.
type ListBankAccountParams struct {
	Page    *int `form:"page,omitempty" json:"page,omitempty"`
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetConversionRateParams defines parameters for GetConversionRate.
type GetConversionRateParams struct {
	From Currency            `form:"from" json:"from"`
	To   Currency            `form:"to" json:"to"`
	Date *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
}

// ListDocumentBlockParams defines parameters for ListDocumentBlock.
type ListDocumentBlockParams struct {
	Page    *int `form:"page,omitempty" json:"page,omitempty"`
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Type Filter document blocks by type
	Type *DocumentBlockType `form:"type,omitempty" json:"type,omitempty"`
}

// ListDocumentParams defines parameters for ListDocument.
type ListDocumentParams struct {
	Page    *int `form:"page,omitempty" json:"page,omitempty"`
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// BlockId Filter documents by the identifier of your DocumentBlock.
	BlockId *int `form:"block_id,omitempty" json:"block_id,omitempty"`

	// PartnerId Filter documents by the identifier of your Partner.
	PartnerId *int `form:"partner_id,omitempty" json:"partner_id,omitempty"`

	// PaymentMethod Filter documents by PaymentMethod value.
	PaymentMethod *PaymentMethod `form:"payment_method,omitempty" json:"payment_method,omitempty"`

	// PaymentStatus Filter documents by PaymentStatus value.
	PaymentStatus *PaymentStatus `form:"payment_status,omitempty" json:"payment_status,omitempty"`

	// StartDate Filter documents by their invoice date.
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate Filter documents by their invoice date.
	EndDate *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty"`

	// StartNumber Starting number of the document, should not contain year or any other formatting. Required if `start_year` given
	StartNumber *int `form:"start_number,omitempty" json:"start_number,omitempty"`

	// EndNumber Ending number of the document, should not contain year or any other formatting. Required if `end_year` given
	EndNumber *int `form:"end_number,omitempty" json:"end_number,omitempty"`

	// StartYear Year for `start_number` parameter. Required if `start_number` given.
	StartYear *int `form:"start_year,omitempty" json:"start_year,omitempty"`

	// EndYear Year for `end_number` parameter. Required if `end_number` given.
	EndYear *int `form:"end_year,omitempty" json:"end_year,omitempty"`

	// Type Filter documents by type
	Type *DocumentType `form:"type,omitempty" json:"type,omitempty"`

	// Query Filter documents by the given text
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// PaidStartDate Filter documents by their payment date.
	PaidStartDate *openapi_types.Date `form:"paid_start_date,omitempty" json:"paid_start_date,omitempty"`

	// PaidEndDate Filter documents by their payment date.
	PaidEndDate *openapi_types.Date `form:"paid_end_date,omitempty" json:"paid_end_date,omitempty"`

	// FulfillmentStartDate Filter documents by their fulfillment date.
	FulfillmentStartDate *openapi_types.Date `form:"fulfillment_start_date,omitempty" json:"fulfillment_start_date,omitempty"`

	// FulfillmentEndDate Filter documents by their fulfillment date.
	FulfillmentEndDate *openapi_types.Date `form:"fulfillment_end_date,omitempty" json:"fulfillment_end_date,omitempty"`

	// LastModifiedDate Filter documents by their last modified date.
	LastModifiedDate *string `form:"last_modified_date,omitempty" json:"last_modified_date,omitempty"`
}

// UpdatePaymentJSONBody defines parameters for UpdatePayment.
type UpdatePaymentJSONBody = []PaymentHistory

// PosPrintParams defines parameters for PosPrint.
type PosPrintParams struct {
	// Size In which size the POS PDF should be rendered.
	Size PosPrintParamsSize `form:"size" json:"size"`
}

// PosPrintParamsSize defines parameters for PosPrint.
type PosPrintParamsSize float32

// ListPartnerParams defines parameters for ListPartner.
type ListPartnerParams struct {
	Page    *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Query   *string `form:"query,omitempty" json:"query,omitempty"`
}

// ListProductParams defines parameters for ListProduct.
type ListProductParams struct {
	Page    *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Query   *string `form:"query,omitempty" json:"query,omitempty"`
}

// SpendingListParams defines parameters for SpendingList.
type SpendingListParams struct {
	Q              *string                `form:"q,omitempty" json:"q,omitempty"`
	Page           *int                   `form:"page,omitempty" json:"page,omitempty"`
	PerPage        *int                   `form:"per_page,omitempty" json:"per_page,omitempty"`
	SpendingDate   *DateType              `form:"spending_date,omitempty" json:"spending_date,omitempty"`
	StartDate      *string                `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate        *string                `form:"end_date,omitempty" json:"end_date,omitempty"`
	PaymentStatus  *PaymentStatusSpending `form:"payment_status,omitempty" json:"payment_status,omitempty"`
	SpendingType   *Source                `form:"spending_type,omitempty" json:"spending_type,omitempty"`
	Categories     *Category              `form:"categories,omitempty" json:"categories,omitempty"`
	Currencies     *Currency              `form:"currencies,omitempty" json:"currencies,omitempty"`
	PaymentMethods *PaymentMethod         `form:"payment_methods,omitempty" json:"payment_methods,omitempty"`
}

// CreateBankAccountJSONRequestBody defines body for CreateBankAccount for application/json ContentType.
type CreateBankAccountJSONRequestBody = BankAccount

// UpdateBankAccountJSONRequestBody defines body for UpdateBankAccount for application/json ContentType.
type UpdateBankAccountJSONRequestBody = BankAccount

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody = CreateDocumentExport

// CreateDocumentJSONRequestBody defines body for CreateDocument for application/json ContentType.
type CreateDocumentJSONRequestBody = DocumentInsert

// CreateReceiptJSONRequestBody defines body for CreateReceipt for application/json ContentType.
type CreateReceiptJSONRequestBody = ReceiptInsert

// CreateReceiptFromDraftJSONRequestBody defines body for CreateReceiptFromDraft for application/json ContentType.
type CreateReceiptFromDraftJSONRequestBody = ReceiptInsert

// CreateDocumentFromDraftJSONRequestBody defines body for CreateDocumentFromDraft for application/json ContentType.
type CreateDocumentFromDraftJSONRequestBody = DocumentInsert

// CancelDocumentJSONRequestBody defines body for CancelDocument for application/json ContentType.
type CancelDocumentJSONRequestBody = DocumentCancellation

// CreateDocumentFromProformaJSONRequestBody defines body for CreateDocumentFromProforma for application/json ContentType.
type CreateDocumentFromProformaJSONRequestBody = InvoiceSettings

// CreateModificationDocumentJSONRequestBody defines body for CreateModificationDocument for application/json ContentType.
type CreateModificationDocumentJSONRequestBody = ModificationDocumentInsert

// UpdatePaymentJSONRequestBody defines body for UpdatePayment for application/json ContentType.
type UpdatePaymentJSONRequestBody = UpdatePaymentJSONBody

// SendDocumentJSONRequestBody defines body for SendDocument for application/json ContentType.
type SendDocumentJSONRequestBody = SendDocument

// CreatePartnerJSONRequestBody defines body for CreatePartner for application/json ContentType.
type CreatePartnerJSONRequestBody = Partner

// UpdatePartnerJSONRequestBody defines body for UpdatePartner for application/json ContentType.
type UpdatePartnerJSONRequestBody = Partner

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody = Product

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody = Product

// SpendingSaveJSONRequestBody defines body for SpendingSave for application/json ContentType.
type SpendingSaveJSONRequestBody = SpendingSave

// SpendingUpdateJSONRequestBody defines body for SpendingUpdate for application/json ContentType.
type SpendingUpdateJSONRequestBody = SpendingSave

// AsDocumentItemData returns the union data inside the DocumentInsert_Items_Item as a DocumentItemData
func (t DocumentInsert_Items_Item) AsDocumentItemData() (DocumentItemData, error) {
	var body DocumentItemData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDocumentItemData overwrites any union data inside the DocumentInsert_Items_Item as the provided DocumentItemData
func (t *DocumentInsert_Items_Item) FromDocumentItemData(v DocumentItemData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDocumentItemData performs a merge with any union data inside the DocumentInsert_Items_Item, using the provided DocumentItemData
func (t *DocumentInsert_Items_Item) MergeDocumentItemData(v DocumentItemData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDocumentProductData returns the union data inside the DocumentInsert_Items_Item as a DocumentProductData
func (t DocumentInsert_Items_Item) AsDocumentProductData() (DocumentProductData, error) {
	var body DocumentProductData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDocumentProductData overwrites any union data inside the DocumentInsert_Items_Item as the provided DocumentProductData
func (t *DocumentInsert_Items_Item) FromDocumentProductData(v DocumentProductData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDocumentProductData performs a merge with any union data inside the DocumentInsert_Items_Item, using the provided DocumentProductData
func (t *DocumentInsert_Items_Item) MergeDocumentProductData(v DocumentProductData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DocumentInsert_Items_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DocumentInsert_Items_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDocumentItemData returns the union data inside the ModificationDocumentInsert_Items_Item as a DocumentItemData
func (t ModificationDocumentInsert_Items_Item) AsDocumentItemData() (DocumentItemData, error) {
	var body DocumentItemData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDocumentItemData overwrites any union data inside the ModificationDocumentInsert_Items_Item as the provided DocumentItemData
func (t *ModificationDocumentInsert_Items_Item) FromDocumentItemData(v DocumentItemData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDocumentItemData performs a merge with any union data inside the ModificationDocumentInsert_Items_Item, using the provided DocumentItemData
func (t *ModificationDocumentInsert_Items_Item) MergeDocumentItemData(v DocumentItemData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDocumentProductData returns the union data inside the ModificationDocumentInsert_Items_Item as a DocumentProductData
func (t ModificationDocumentInsert_Items_Item) AsDocumentProductData() (DocumentProductData, error) {
	var body DocumentProductData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDocumentProductData overwrites any union data inside the ModificationDocumentInsert_Items_Item as the provided DocumentProductData
func (t *ModificationDocumentInsert_Items_Item) FromDocumentProductData(v DocumentProductData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDocumentProductData performs a merge with any union data inside the ModificationDocumentInsert_Items_Item, using the provided DocumentProductData
func (t *ModificationDocumentInsert_Items_Item) MergeDocumentProductData(v DocumentProductData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ModificationDocumentInsert_Items_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ModificationDocumentInsert_Items_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsReceiptItemData returns the union data inside the ReceiptInsert_Items_Item as a ReceiptItemData
func (t ReceiptInsert_Items_Item) AsReceiptItemData() (ReceiptItemData, error) {
	var body ReceiptItemData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReceiptItemData overwrites any union data inside the ReceiptInsert_Items_Item as the provided ReceiptItemData
func (t *ReceiptInsert_Items_Item) FromReceiptItemData(v ReceiptItemData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReceiptItemData performs a merge with any union data inside the ReceiptInsert_Items_Item, using the provided ReceiptItemData
func (t *ReceiptInsert_Items_Item) MergeReceiptItemData(v ReceiptItemData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReceiptProductData returns the union data inside the ReceiptInsert_Items_Item as a ReceiptProductData
func (t ReceiptInsert_Items_Item) AsReceiptProductData() (ReceiptProductData, error) {
	var body ReceiptProductData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReceiptProductData overwrites any union data inside the ReceiptInsert_Items_Item as the provided ReceiptProductData
func (t *ReceiptInsert_Items_Item) FromReceiptProductData(v ReceiptProductData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReceiptProductData performs a merge with any union data inside the ReceiptInsert_Items_Item, using the provided ReceiptProductData
func (t *ReceiptInsert_Items_Item) MergeReceiptProductData(v ReceiptProductData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReceiptInsert_Items_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReceiptInsert_Items_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
